// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ehealthcare.Model;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20220123191432_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("HospitalLibrary.DoctorSchedule.Model.DoctorVacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'10', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DoctorVacations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Zimovanje",
                            DoctorId = "mkisic"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Letovanje",
                            DoctorId = "nelex"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Bolovanje",
                            DoctorId = "mkisic"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.DoctorSchedule.Model.OnCallShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'10', '1', '', '', 'False', '1'")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OnCallShifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "mkisic"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "nelex"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "mkisic"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = "nelex"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.DoctorSchedule.Model.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ShiftOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("HospitalLibrary.Events.Model.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EventAppName")
                        .HasColumnType("integer");

                    b.Property<int>("EventClass")
                        .HasColumnType("integer");

                    b.Property<string>("IdUser")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("HospitalLibrary.FeedbackAndSurvey.Model.PatientFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Anonymous")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientUsername")
                        .HasColumnType("text");

                    b.Property<bool>("PublishAllowed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PatientFeedbacks");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Anonymous = false,
                            IsPublished = true,
                            PatientUsername = "imbiamba",
                            PublishAllowed = true,
                            SubmissionDate = new DateTime(2021, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Sehr gut!"
                        },
                        new
                        {
                            Id = -2,
                            Anonymous = false,
                            IsPublished = false,
                            PatientUsername = "kristina",
                            PublishAllowed = true,
                            SubmissionDate = new DateTime(2021, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Test on me"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.FeedbackAndSurvey.Model.Question", b =>
                {
                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("SurveyId", "Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            SurveyId = -1,
                            Id = -1,
                            Category = 1,
                            Value = 1
                        });
                });

            modelBuilder.Entity("HospitalLibrary.FeedbackAndSurvey.Model.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("VisitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            PatientId = "imbiamba",
                            SubmissionDate = new DateTime(2021, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VisitId = 1
                        });
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.ExteriorGraphic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IdElement")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExteriorGraphic");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdElement = 0,
                            Name = "ZGR1",
                            Type = "building"
                        },
                        new
                        {
                            Id = 2,
                            IdElement = 1,
                            Name = "ZGR2",
                            Type = "building"
                        },
                        new
                        {
                            Id = 7,
                            IdElement = -1,
                            Name = "",
                            Type = "road"
                        },
                        new
                        {
                            Id = 3,
                            IdElement = -1,
                            Name = "",
                            Type = "road"
                        },
                        new
                        {
                            Id = 4,
                            IdElement = -1,
                            Name = "",
                            Type = "road"
                        },
                        new
                        {
                            Id = 5,
                            IdElement = -1,
                            Name = "P",
                            Type = "parking"
                        },
                        new
                        {
                            Id = 6,
                            IdElement = -1,
                            Name = "P",
                            Type = "parking"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.FloorGraphic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("FloorGraphics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildingId = 0,
                            Floor = 0
                        },
                        new
                        {
                            Id = 2,
                            BuildingId = 0,
                            Floor = 1
                        },
                        new
                        {
                            Id = 3,
                            BuildingId = 1,
                            Floor = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.RoomGraphic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DoorPosition")
                        .HasColumnType("text");

                    b.Property<int>("FloorGraphicId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FloorGraphicId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomGraphics");

                    b.HasData(
                        new
                        {
                            Id = 16,
                            DoorPosition = "right",
                            FloorGraphicId = 1,
                            RoomId = 16
                        },
                        new
                        {
                            Id = 1,
                            DoorPosition = "right",
                            FloorGraphicId = 1,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            DoorPosition = "right",
                            FloorGraphicId = 1,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 3,
                            DoorPosition = "left",
                            FloorGraphicId = 1,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 4,
                            DoorPosition = "top",
                            FloorGraphicId = 1,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 5,
                            DoorPosition = "top",
                            FloorGraphicId = 1,
                            RoomId = 5
                        },
                        new
                        {
                            Id = 6,
                            DoorPosition = "none",
                            FloorGraphicId = 1,
                            RoomId = 6
                        },
                        new
                        {
                            Id = 7,
                            DoorPosition = "right",
                            FloorGraphicId = 2,
                            RoomId = 7
                        },
                        new
                        {
                            Id = 8,
                            DoorPosition = "left",
                            FloorGraphicId = 2,
                            RoomId = 8
                        },
                        new
                        {
                            Id = 9,
                            DoorPosition = "right",
                            FloorGraphicId = 2,
                            RoomId = 9
                        },
                        new
                        {
                            Id = 10,
                            DoorPosition = "left",
                            FloorGraphicId = 2,
                            RoomId = 10
                        },
                        new
                        {
                            Id = 11,
                            DoorPosition = "right",
                            FloorGraphicId = 2,
                            RoomId = 11
                        },
                        new
                        {
                            Id = 12,
                            DoorPosition = "left",
                            FloorGraphicId = 2,
                            RoomId = 12
                        },
                        new
                        {
                            Id = 13,
                            DoorPosition = "top",
                            FloorGraphicId = 2,
                            RoomId = 13
                        },
                        new
                        {
                            Id = 14,
                            DoorPosition = "top",
                            FloorGraphicId = 2,
                            RoomId = 14
                        },
                        new
                        {
                            Id = 15,
                            DoorPosition = "none",
                            FloorGraphicId = 2,
                            RoomId = 15
                        },
                        new
                        {
                            Id = 17,
                            DoorPosition = "right",
                            FloorGraphicId = 3,
                            RoomId = 17
                        });
                });

            modelBuilder.Entity("HospitalLibrary.MedicalRecords.Model.Allergen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "macija dlaka"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.MedicalRecords.Model.MedicalRecord", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("PersonalId")
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("PatientId");

                    b.HasIndex("DoctorId");

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            PatientId = "imbiamba",
                            BloodType = 4,
                            DoctorId = "nelex",
                            Height = 186,
                            PersonalId = "1209001129123",
                            Profession = "Professor",
                            Weight = 90
                        },
                        new
                        {
                            PatientId = "kristina",
                            BloodType = 6,
                            DoctorId = "nelex",
                            Height = 186,
                            PersonalId = "1209222129123",
                            Profession = "Professor",
                            Weight = 90
                        });
                });

            modelBuilder.Entity("HospitalLibrary.MedicalRecords.Model.MedicinePrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Diagnosis")
                        .HasColumnType("text");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<string>("MedicineId")
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("HospitalLibrary.Model.PatientAllergen", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<int>("AllergenId")
                        .HasColumnType("integer");

                    b.HasKey("PatientId", "AllergenId");

                    b.HasIndex("AllergenId");

                    b.ToTable("PatientAllergens");

                    b.HasData(
                        new
                        {
                            PatientId = "imbiamba",
                            AllergenId = 1
                        });
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEquipment.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRenovated")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IsRenovatedUntill")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumOfTakenBeds")
                        .HasColumnType("integer");

                    b.Property<int>("RoomType")
                        .HasColumnType("integer");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 16,
                            Floor = 0,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Counter 1",
                            NumOfTakenBeds = 0,
                            RoomType = 4,
                            Sector = "CS"
                        },
                        new
                        {
                            Id = 1,
                            Floor = 0,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Counter 2",
                            NumOfTakenBeds = 0,
                            RoomType = 4,
                            Sector = "CS"
                        },
                        new
                        {
                            Id = 2,
                            Floor = 0,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Examination room 1",
                            NumOfTakenBeds = 1,
                            RoomType = 0,
                            Sector = "ES"
                        },
                        new
                        {
                            Id = 3,
                            Floor = 0,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Examination room 2",
                            NumOfTakenBeds = 1,
                            RoomType = 0,
                            Sector = "ES"
                        },
                        new
                        {
                            Id = 4,
                            Floor = 0,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Restroom 1",
                            NumOfTakenBeds = 0,
                            RoomType = 3,
                            Sector = "RRS"
                        },
                        new
                        {
                            Id = 5,
                            Floor = 0,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Restroom 2",
                            NumOfTakenBeds = 0,
                            RoomType = 3,
                            Sector = "RRS"
                        },
                        new
                        {
                            Id = 6,
                            Floor = 0,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Waiting room 1",
                            NumOfTakenBeds = 0,
                            RoomType = 5,
                            Sector = "WS"
                        },
                        new
                        {
                            Id = 7,
                            Floor = 1,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Operation room 1",
                            NumOfTakenBeds = 0,
                            RoomType = 1,
                            Sector = "OS"
                        },
                        new
                        {
                            Id = 8,
                            Floor = 1,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Operation room 2",
                            NumOfTakenBeds = 0,
                            RoomType = 1,
                            Sector = "OS"
                        },
                        new
                        {
                            Id = 9,
                            Floor = 1,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Operation room 3",
                            NumOfTakenBeds = 0,
                            RoomType = 1,
                            Sector = "OS"
                        },
                        new
                        {
                            Id = 10,
                            Floor = 1,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Operation room 4",
                            NumOfTakenBeds = 0,
                            RoomType = 1,
                            Sector = "OS"
                        },
                        new
                        {
                            Id = 11,
                            Floor = 1,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Examination room 3",
                            NumOfTakenBeds = 0,
                            RoomType = 0,
                            Sector = "ES"
                        },
                        new
                        {
                            Id = 12,
                            Floor = 1,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Examination room 4",
                            NumOfTakenBeds = 0,
                            RoomType = 0,
                            Sector = "ES"
                        },
                        new
                        {
                            Id = 13,
                            Floor = 1,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Restroom 3",
                            NumOfTakenBeds = 0,
                            RoomType = 3,
                            Sector = "RRS"
                        },
                        new
                        {
                            Id = 14,
                            Floor = 1,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Restroom 4",
                            NumOfTakenBeds = 0,
                            RoomType = 3,
                            Sector = "RRS"
                        },
                        new
                        {
                            Id = 15,
                            Floor = 1,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Waiting room 2",
                            NumOfTakenBeds = 0,
                            RoomType = 5,
                            Sector = "WS"
                        },
                        new
                        {
                            Id = 17,
                            Floor = 0,
                            IsRenovated = false,
                            IsRenovatedUntill = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Waiting room 3",
                            NumOfTakenBeds = 0,
                            RoomType = 5,
                            Sector = "WS"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEquipment.Model.RoomEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoomEquipments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bed",
                            Quantity = 2,
                            RoomId = 1,
                            Type = "Static"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Needle",
                            Quantity = 200,
                            RoomId = 2,
                            Type = "Dynamic"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Needle",
                            Quantity = 300,
                            RoomId = 3,
                            Type = "Dynamic"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Picks",
                            Quantity = 300,
                            RoomId = 16,
                            Type = "Dynamic"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEquipment.Terms.Model.TermOfRelocationEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("IdDestinationRoom")
                        .HasColumnType("integer");

                    b.Property<int>("IdSourceRoom")
                        .HasColumnType("integer");

                    b.Property<string>("NameOfEquipment")
                        .HasColumnType("text");

                    b.Property<int>("QuantityOfEquipment")
                        .HasColumnType("integer");

                    b.Property<int>("RelocationState")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TermOfRelocationEquipments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DurationInMinutes = 10,
                            IdDestinationRoom = 8,
                            IdSourceRoom = 7,
                            NameOfEquipment = "bed",
                            QuantityOfEquipment = 2,
                            RelocationState = 0
                        },
                        new
                        {
                            Id = 2,
                            DurationInMinutes = 40,
                            IdDestinationRoom = 9,
                            IdSourceRoom = 7,
                            NameOfEquipment = "needle",
                            QuantityOfEquipment = 14,
                            RelocationState = 0
                        },
                        new
                        {
                            Id = 3,
                            DurationInMinutes = 15,
                            IdDestinationRoom = 9,
                            IdSourceRoom = 8,
                            NameOfEquipment = "infusion",
                            QuantityOfEquipment = 8,
                            RelocationState = 0
                        },
                        new
                        {
                            Id = 4,
                            DurationInMinutes = 25,
                            IdDestinationRoom = 11,
                            IdSourceRoom = 9,
                            NameOfEquipment = "table",
                            QuantityOfEquipment = 1,
                            RelocationState = 0
                        },
                        new
                        {
                            Id = 5,
                            DurationInMinutes = 30,
                            IdDestinationRoom = 7,
                            IdSourceRoom = 10,
                            NameOfEquipment = "xrayMachine",
                            QuantityOfEquipment = 1,
                            RelocationState = 0
                        },
                        new
                        {
                            Id = 6,
                            DurationInMinutes = 20,
                            IdDestinationRoom = 11,
                            IdSourceRoom = 10,
                            NameOfEquipment = "chair",
                            QuantityOfEquipment = 5,
                            RelocationState = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEquipment.Terms.Model.TermOfRenovation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DurationInMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("EquipmentLogic")
                        .HasColumnType("integer");

                    b.Property<int>("IdRoomA")
                        .HasColumnType("integer");

                    b.Property<int>("IdRoomB")
                        .HasColumnType("integer");

                    b.Property<string>("NewNameForRoomA")
                        .HasColumnType("text");

                    b.Property<string>("NewNameForRoomB")
                        .HasColumnType("text");

                    b.Property<int>("NewRoomTypeForRoomA")
                        .HasColumnType("integer");

                    b.Property<int>("NewRoomTypeForRoomB")
                        .HasColumnType("integer");

                    b.Property<string>("NewSectorForRoomA")
                        .HasColumnType("text");

                    b.Property<string>("NewSectorForRoomB")
                        .HasColumnType("text");

                    b.Property<int>("StateOfRenovation")
                        .HasColumnType("integer");

                    b.Property<int>("TypeOfRenovation")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TermOfRenovations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DurationInMinutes = 60,
                            EquipmentLogic = 0,
                            IdRoomA = 1,
                            IdRoomB = 16,
                            NewNameForRoomA = "Operation room 5",
                            NewNameForRoomB = "",
                            NewRoomTypeForRoomA = 1,
                            NewRoomTypeForRoomB = 5,
                            NewSectorForRoomA = "OS",
                            NewSectorForRoomB = "",
                            StateOfRenovation = 3,
                            TypeOfRenovation = 1
                        },
                        new
                        {
                            Id = 2,
                            DurationInMinutes = 1440,
                            EquipmentLogic = 2,
                            IdRoomA = 4,
                            IdRoomB = -1,
                            NewNameForRoomA = "Operation room 6",
                            NewNameForRoomB = "Operation room 7",
                            NewRoomTypeForRoomA = 1,
                            NewRoomTypeForRoomB = 1,
                            NewSectorForRoomA = "OS",
                            NewSectorForRoomB = "OS",
                            StateOfRenovation = 0,
                            TypeOfRenovation = 0
                        });
                });

            modelBuilder.Entity("ehealthcare.Model.MedicalPermit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalPermits");
                });

            modelBuilder.Entity("ehealthcare.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<int>("LoginType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<Guid>("Token")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("ehealthcare.Model.Visit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("VisitType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            DoctorId = "nelex",
                            EndTime = new DateTime(2021, 11, 30, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            IsCanceled = false,
                            IsReviewed = false,
                            PatientId = "kristina",
                            StartTime = new DateTime(2021, 11, 30, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            VisitType = 0
                        },
                        new
                        {
                            Id = -2,
                            DoctorId = "nelex",
                            EndTime = new DateTime(2022, 1, 30, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            IsCanceled = false,
                            IsReviewed = false,
                            PatientId = "kristina",
                            StartTime = new DateTime(2022, 1, 30, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            VisitType = 0
                        },
                        new
                        {
                            Id = -3,
                            DoctorId = "nelex",
                            EndTime = new DateTime(2021, 12, 29, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            IsCanceled = true,
                            IsReviewed = false,
                            PatientId = "kristina",
                            StartTime = new DateTime(2021, 12, 29, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            VisitType = 0
                        },
                        new
                        {
                            Id = -4,
                            DoctorId = "nelex",
                            EndTime = new DateTime(2022, 1, 3, 19, 30, 0, 0, DateTimeKind.Unspecified),
                            IsCanceled = true,
                            IsReviewed = false,
                            PatientId = "kristina",
                            StartTime = new DateTime(2022, 1, 3, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            VisitType = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Shared.Model.Manager", b =>
                {
                    b.HasBaseType("ehealthcare.Model.User");

                    b.HasDiscriminator().HasValue("Manager");

                    b.HasData(
                        new
                        {
                            Id = "laki",
                            Address = "Hajduk Veljka, 5",
                            City = "Novi Sad",
                            Country = "Serbia",
                            DateOfBirth = new DateTime(1990, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "igor.m@gmail.com",
                            Gender = "male",
                            IsActivated = true,
                            IsBlocked = false,
                            LoginType = 1,
                            Name = "Igor",
                            ParentName = "Ivan",
                            Password = "Laki123!",
                            Phone = "129572904354",
                            Surname = "Maric",
                            Token = new Guid("00000000-0000-0000-0000-000000000000"),
                            Username = "laki"
                        },
                        new
                        {
                            Id = "jagodica",
                            Address = "Rumenacka, 23",
                            City = "Novi Sad",
                            Country = "Serbia",
                            DateOfBirth = new DateTime(1985, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jagodica@gmail.com",
                            Gender = "female",
                            IsActivated = true,
                            IsBlocked = false,
                            LoginType = 1,
                            Name = "Jagoda",
                            ParentName = "Petar",
                            Password = "Jagodica123!",
                            Phone = "6820543267243",
                            Surname = "Vasic",
                            Token = new Guid("00000000-0000-0000-0000-000000000000"),
                            Username = "jagodica"
                        });
                });

            modelBuilder.Entity("ehealthcare.Model.Doctor", b =>
                {
                    b.HasBaseType("ehealthcare.Model.User");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("ShiftOrder")
                        .HasColumnType("integer");

                    b.Property<int>("Specialization")
                        .HasColumnType("integer");

                    b.Property<int>("UsedOffDays")
                        .HasColumnType("integer");

                    b.ToTable("Doctors");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = "nelex",
                            Address = "Sime Milutinovica, 2",
                            City = "Novi Sad",
                            Country = "Serbia",
                            DateOfBirth = new DateTime(1999, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nemanjar@gmail.com",
                            Gender = "male",
                            IsActivated = false,
                            IsBlocked = false,
                            LoginType = 2,
                            Name = "Nemanja",
                            ParentName = "Zoran",
                            Password = "najjacapecurka",
                            Phone = "019919199191",
                            Surname = "Radojcic",
                            Token = new Guid("00000000-0000-0000-0000-000000000000"),
                            Username = "nelex",
                            RoomId = 1,
                            ShiftOrder = 1,
                            Specialization = 3,
                            UsedOffDays = 12
                        },
                        new
                        {
                            Id = "mkisic",
                            Address = "Sime Milutinovica, 2",
                            City = "Novi Sad",
                            Country = "Serbia",
                            DateOfBirth = new DateTime(1999, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nemanjar@gmail.com",
                            Gender = "male",
                            IsActivated = false,
                            IsBlocked = false,
                            LoginType = 2,
                            Name = "Mihajlo",
                            ParentName = "Zvezdan",
                            Password = "ftn",
                            Phone = "019919199191",
                            Surname = "Kisic",
                            Token = new Guid("00000000-0000-0000-0000-000000000000"),
                            Username = "mkisic",
                            RoomId = 7,
                            ShiftOrder = 1,
                            Specialization = 0,
                            UsedOffDays = 12
                        });
                });

            modelBuilder.Entity("ehealthcare.Model.Patient", b =>
                {
                    b.HasBaseType("ehealthcare.Model.User");

                    b.Property<string>("DoctorId")
                        .HasColumnType("text");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients");

                    b.HasDiscriminator().HasValue("Patient");

                    b.HasData(
                        new
                        {
                            Id = "imbiamba",
                            Address = "Sime Milosevica, 5",
                            City = "Novi Sad",
                            Country = "Serbia",
                            DateOfBirth = new DateTime(2001, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "markoilic@gmail.com",
                            Gender = "male",
                            IsActivated = false,
                            IsBlocked = false,
                            LoginType = 0,
                            Name = "Marko",
                            ParentName = "Milan",
                            Password = "pecurkaa",
                            Phone = "019919199191",
                            Surname = "Ilic",
                            Token = new Guid("601ccaa8-3a07-4a7c-89b9-9953e6eac8a7"),
                            Username = "imbiamba"
                        },
                        new
                        {
                            Id = "kristina",
                            Address = "Sime Milosevica, 9",
                            City = "Novi Sad",
                            Country = "Serbia",
                            DateOfBirth = new DateTime(1999, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sdjfsj@gmail.com",
                            Gender = "female",
                            IsActivated = true,
                            IsBlocked = false,
                            LoginType = 0,
                            Name = "Kristina",
                            ParentName = "Zoran",
                            Password = "kristinica",
                            Phone = "019919195191",
                            Surname = "Tamindzija",
                            Token = new Guid("601ccaa8-3a07-4a7c-89b9-9923e6bac8a7"),
                            Username = "kristina"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.DoctorSchedule.Model.DoctorVacation", b =>
                {
                    b.OwnsOne("HospitalLibrary.RoomsAndEquipment.Terms.Utils.TimeInterval", "DateSpecification", b1 =>
                        {
                            b1.Property<int>("DoctorVacationId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<DateTime>("EndTime")
                                .HasColumnName("EndTime")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnName("StartTime")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("DoctorVacationId");

                            b1.ToTable("DoctorVacations");

                            b1.WithOwner()
                                .HasForeignKey("DoctorVacationId");

                            b1.HasData(
                                new
                                {
                                    DoctorVacationId = 1,
                                    EndTime = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    StartTime = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    DoctorVacationId = 2,
                                    EndTime = new DateTime(2022, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    StartTime = new DateTime(2022, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    DoctorVacationId = 3,
                                    EndTime = new DateTime(2022, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                                    StartTime = new DateTime(2022, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });
                });

            modelBuilder.Entity("HospitalLibrary.DoctorSchedule.Model.Shift", b =>
                {
                    b.OwnsOne("HospitalLibrary.RoomsAndEquipment.Terms.Utils.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<int>("ShiftId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<DateTime>("EndTime")
                                .HasColumnName("EndTime")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnName("StartTime")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("ShiftId");

                            b1.ToTable("Shifts");

                            b1.WithOwner()
                                .HasForeignKey("ShiftId");
                        });
                });

            modelBuilder.Entity("HospitalLibrary.FeedbackAndSurvey.Model.Question", b =>
                {
                    b.HasOne("HospitalLibrary.FeedbackAndSurvey.Model.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.FeedbackAndSurvey.Model.Survey", b =>
                {
                    b.HasOne("ehealthcare.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.ExteriorGraphic", b =>
                {
                    b.OwnsOne("HospitalLibrary.GraphicalEditor.Model.Dimension", "Dimension", b1 =>
                        {
                            b1.Property<int>("ExteriorGraphicId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<int>("Height")
                                .HasColumnName("Height")
                                .HasColumnType("integer");

                            b1.Property<int>("Width")
                                .HasColumnName("Width")
                                .HasColumnType("integer");

                            b1.HasKey("ExteriorGraphicId");

                            b1.ToTable("ExteriorGraphic");

                            b1.WithOwner()
                                .HasForeignKey("ExteriorGraphicId");

                            b1.HasData(
                                new
                                {
                                    ExteriorGraphicId = 1,
                                    Height = 200,
                                    Width = 100
                                },
                                new
                                {
                                    ExteriorGraphicId = 2,
                                    Height = 110,
                                    Width = 180
                                },
                                new
                                {
                                    ExteriorGraphicId = 7,
                                    Height = 50,
                                    Width = 600
                                },
                                new
                                {
                                    ExteriorGraphicId = 3,
                                    Height = 110,
                                    Width = 50
                                },
                                new
                                {
                                    ExteriorGraphicId = 4,
                                    Height = 400,
                                    Width = 50
                                },
                                new
                                {
                                    ExteriorGraphicId = 5,
                                    Height = 80,
                                    Width = 50
                                },
                                new
                                {
                                    ExteriorGraphicId = 6,
                                    Height = 80,
                                    Width = 50
                                });
                        });

                    b.OwnsOne("HospitalLibrary.GraphicalEditor.Model.Position", "Position", b1 =>
                        {
                            b1.Property<int>("ExteriorGraphicId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<int>("X")
                                .HasColumnName("X")
                                .HasColumnType("integer");

                            b1.Property<int>("Y")
                                .HasColumnName("Y")
                                .HasColumnType("integer");

                            b1.HasKey("ExteriorGraphicId");

                            b1.ToTable("ExteriorGraphic");

                            b1.WithOwner()
                                .HasForeignKey("ExteriorGraphicId");

                            b1.HasData(
                                new
                                {
                                    ExteriorGraphicId = 1,
                                    X = 180,
                                    Y = 30
                                },
                                new
                                {
                                    ExteriorGraphicId = 2,
                                    X = 380,
                                    Y = 120
                                },
                                new
                                {
                                    ExteriorGraphicId = 7,
                                    X = 0,
                                    Y = 250
                                },
                                new
                                {
                                    ExteriorGraphicId = 3,
                                    X = 0,
                                    Y = 290
                                },
                                new
                                {
                                    ExteriorGraphicId = 4,
                                    X = 305,
                                    Y = 0
                                },
                                new
                                {
                                    ExteriorGraphicId = 5,
                                    X = 245,
                                    Y = 310
                                },
                                new
                                {
                                    ExteriorGraphicId = 6,
                                    X = 380,
                                    Y = 20
                                });
                        });
                });

            modelBuilder.Entity("HospitalLibrary.GraphicalEditor.Model.RoomGraphic", b =>
                {
                    b.HasOne("HospitalLibrary.GraphicalEditor.Model.FloorGraphic", "FloorGraphic")
                        .WithMany("RoomGraphics")
                        .HasForeignKey("FloorGraphicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.RoomsAndEquipment.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("HospitalLibrary.GraphicalEditor.Model.Dimension", "Dimension", b1 =>
                        {
                            b1.Property<int>("RoomGraphicId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<int>("Height")
                                .HasColumnName("Height")
                                .HasColumnType("integer");

                            b1.Property<int>("Width")
                                .HasColumnName("Width")
                                .HasColumnType("integer");

                            b1.HasKey("RoomGraphicId");

                            b1.ToTable("RoomGraphics");

                            b1.WithOwner()
                                .HasForeignKey("RoomGraphicId");

                            b1.HasData(
                                new
                                {
                                    RoomGraphicId = 16,
                                    Height = 100,
                                    Width = 100
                                },
                                new
                                {
                                    RoomGraphicId = 1,
                                    Height = 100,
                                    Width = 100
                                },
                                new
                                {
                                    RoomGraphicId = 2,
                                    Height = 145,
                                    Width = 75
                                },
                                new
                                {
                                    RoomGraphicId = 3,
                                    Height = 145,
                                    Width = 75
                                },
                                new
                                {
                                    RoomGraphicId = 4,
                                    Height = 80,
                                    Width = 150
                                },
                                new
                                {
                                    RoomGraphicId = 5,
                                    Height = 80,
                                    Width = 150
                                },
                                new
                                {
                                    RoomGraphicId = 6,
                                    Height = 160,
                                    Width = 140
                                },
                                new
                                {
                                    RoomGraphicId = 7,
                                    Height = 100,
                                    Width = 100
                                },
                                new
                                {
                                    RoomGraphicId = 8,
                                    Height = 100,
                                    Width = 100
                                },
                                new
                                {
                                    RoomGraphicId = 9,
                                    Height = 100,
                                    Width = 100
                                },
                                new
                                {
                                    RoomGraphicId = 10,
                                    Height = 100,
                                    Width = 100
                                },
                                new
                                {
                                    RoomGraphicId = 11,
                                    Height = 145,
                                    Width = 75
                                },
                                new
                                {
                                    RoomGraphicId = 12,
                                    Height = 145,
                                    Width = 75
                                },
                                new
                                {
                                    RoomGraphicId = 13,
                                    Height = 80,
                                    Width = 150
                                },
                                new
                                {
                                    RoomGraphicId = 14,
                                    Height = 80,
                                    Width = 150
                                },
                                new
                                {
                                    RoomGraphicId = 15,
                                    Height = 100,
                                    Width = 140
                                },
                                new
                                {
                                    RoomGraphicId = 17,
                                    Height = 100,
                                    Width = 100
                                });
                        });

                    b.OwnsOne("HospitalLibrary.GraphicalEditor.Model.Position", "Position", b1 =>
                        {
                            b1.Property<int>("RoomGraphicId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<int>("X")
                                .HasColumnName("X")
                                .HasColumnType("integer");

                            b1.Property<int>("Y")
                                .HasColumnName("Y")
                                .HasColumnType("integer");

                            b1.HasKey("RoomGraphicId");

                            b1.ToTable("RoomGraphics");

                            b1.WithOwner()
                                .HasForeignKey("RoomGraphicId");

                            b1.HasData(
                                new
                                {
                                    RoomGraphicId = 16,
                                    X = 0,
                                    Y = 0
                                },
                                new
                                {
                                    RoomGraphicId = 1,
                                    X = 0,
                                    Y = 100
                                },
                                new
                                {
                                    RoomGraphicId = 2,
                                    X = 0,
                                    Y = 340
                                },
                                new
                                {
                                    RoomGraphicId = 3,
                                    X = 222,
                                    Y = 340
                                },
                                new
                                {
                                    RoomGraphicId = 4,
                                    X = 0,
                                    Y = 517
                                },
                                new
                                {
                                    RoomGraphicId = 5,
                                    X = 150,
                                    Y = 517
                                },
                                new
                                {
                                    RoomGraphicId = 6,
                                    X = 150,
                                    Y = 20
                                },
                                new
                                {
                                    RoomGraphicId = 7,
                                    X = 0,
                                    Y = 0
                                },
                                new
                                {
                                    RoomGraphicId = 8,
                                    X = 197,
                                    Y = 0
                                },
                                new
                                {
                                    RoomGraphicId = 9,
                                    X = 0,
                                    Y = 100
                                },
                                new
                                {
                                    RoomGraphicId = 10,
                                    X = 197,
                                    Y = 100
                                },
                                new
                                {
                                    RoomGraphicId = 11,
                                    X = 0,
                                    Y = 340
                                },
                                new
                                {
                                    RoomGraphicId = 12,
                                    X = 222,
                                    Y = 340
                                },
                                new
                                {
                                    RoomGraphicId = 13,
                                    X = 0,
                                    Y = 517
                                },
                                new
                                {
                                    RoomGraphicId = 14,
                                    X = 150,
                                    Y = 517
                                },
                                new
                                {
                                    RoomGraphicId = 15,
                                    X = 10,
                                    Y = 220
                                },
                                new
                                {
                                    RoomGraphicId = 17,
                                    X = 0,
                                    Y = 0
                                });
                        });
                });

            modelBuilder.Entity("HospitalLibrary.MedicalRecords.Model.MedicalRecord", b =>
                {
                    b.HasOne("ehealthcare.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("ehealthcare.Model.Patient", "Patient")
                        .WithOne("Medical")
                        .HasForeignKey("HospitalLibrary.MedicalRecords.Model.MedicalRecord", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Model.PatientAllergen", b =>
                {
                    b.HasOne("HospitalLibrary.MedicalRecords.Model.Allergen", "Allergen")
                        .WithMany("PatientAllergens")
                        .HasForeignKey("AllergenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ehealthcare.Model.Patient", "Patient")
                        .WithMany("PatientAllergens")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEquipment.Terms.Model.TermOfRelocationEquipment", b =>
                {
                    b.OwnsOne("HospitalLibrary.RoomsAndEquipment.Terms.Utils.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<int>("TermOfRelocationEquipmentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<DateTime>("EndTime")
                                .HasColumnName("EndTime")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnName("StartTime")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("TermOfRelocationEquipmentId");

                            b1.ToTable("TermOfRelocationEquipments");

                            b1.WithOwner()
                                .HasForeignKey("TermOfRelocationEquipmentId");

                            b1.HasData(
                                new
                                {
                                    TermOfRelocationEquipmentId = 1,
                                    EndTime = new DateTime(2021, 11, 22, 1, 10, 0, 0, DateTimeKind.Unspecified),
                                    StartTime = new DateTime(2021, 11, 22, 1, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    TermOfRelocationEquipmentId = 2,
                                    EndTime = new DateTime(2021, 11, 22, 4, 10, 0, 0, DateTimeKind.Unspecified),
                                    StartTime = new DateTime(2021, 11, 22, 3, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    TermOfRelocationEquipmentId = 3,
                                    EndTime = new DateTime(2021, 11, 23, 7, 45, 0, 0, DateTimeKind.Unspecified),
                                    StartTime = new DateTime(2021, 11, 23, 7, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    TermOfRelocationEquipmentId = 4,
                                    EndTime = new DateTime(2021, 11, 23, 9, 25, 0, 0, DateTimeKind.Unspecified),
                                    StartTime = new DateTime(2021, 11, 23, 9, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    TermOfRelocationEquipmentId = 5,
                                    EndTime = new DateTime(2021, 11, 23, 11, 15, 0, 0, DateTimeKind.Unspecified),
                                    StartTime = new DateTime(2021, 11, 23, 10, 45, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    TermOfRelocationEquipmentId = 6,
                                    EndTime = new DateTime(2021, 11, 23, 14, 50, 0, 0, DateTimeKind.Unspecified),
                                    StartTime = new DateTime(2021, 11, 23, 14, 30, 0, 0, DateTimeKind.Unspecified)
                                });
                        });
                });

            modelBuilder.Entity("HospitalLibrary.RoomsAndEquipment.Terms.Model.TermOfRenovation", b =>
                {
                    b.OwnsOne("HospitalLibrary.RoomsAndEquipment.Terms.Utils.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<int>("TermOfRenovationId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<DateTime>("EndTime")
                                .HasColumnName("EndTime")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<DateTime>("StartTime")
                                .HasColumnName("StartTime")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("TermOfRenovationId");

                            b1.ToTable("TermOfRenovations");

                            b1.WithOwner()
                                .HasForeignKey("TermOfRenovationId");

                            b1.HasData(
                                new
                                {
                                    TermOfRenovationId = 1,
                                    EndTime = new DateTime(2021, 12, 7, 11, 30, 0, 0, DateTimeKind.Unspecified),
                                    StartTime = new DateTime(2021, 12, 7, 10, 30, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    TermOfRenovationId = 2,
                                    EndTime = new DateTime(2021, 12, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                                    StartTime = new DateTime(2021, 12, 17, 9, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });
                });

            modelBuilder.Entity("ehealthcare.Model.MedicalPermit", b =>
                {
                    b.HasOne("ehealthcare.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("ehealthcare.Model.Patient", null)
                        .WithMany("MedicalPermits")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("ehealthcare.Model.Visit", b =>
                {
                    b.HasOne("ehealthcare.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("ehealthcare.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("ehealthcare.Model.Patient", b =>
                {
                    b.HasOne("ehealthcare.Model.Doctor", null)
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId");
                });
#pragma warning restore 612, 618
        }
    }
}
